#!/usr/bin/env python3
"""
Inliner 1.1
A tool that converts indented BASIC programs into line numbered style.

Copyright (C) 2017-2018 by Giovanni Nunes <giovanni.nunes@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

Usage:
inliner <filename> [ --start=<line> --step=<value> --upper --rem ]
inliner --help

Options:
--help          Show this screen.
--rem           Use the REM statement istead of the apostrophe.
--upper         Put all BASIC statements in uppercase.
"""
import logging
from os import path
from docopt import docopt

from Inliner import Inliner

START = 10
STEP = 10


def main():

    # fist line and increment between lines
    start = abs(int(arguments['--start'])) if arguments[
        '--start'] is not None else START
    step = abs(int(arguments['--step'])) if arguments[
        '--step'] is not None else STEP

    # UPPERCASE or lowercase code output
    to_upper = True if arguments['--upper'] is True else False

    # check use of 'rem' stetement instead of apostrophe
    if arguments['--rem']:
        # if output is in uppercase, adjust it
        remark = 'rem' if to_upper is False else 'REM'
    else:
        remark = "\'"

    # why os load here?
    # because I'm going to implement the conversion of multiples files.
    program = Inliner.load(filename=arguments['<filename>'])

    numbered = Inliner(
        program=program, start_line=start, step_line=step, remark=remark)

    print(numbered.list(uppercase=to_upper, linefeed="\r\n"), end="")


if __name__ == '__main__':
    arguments = docopt(__doc__)
    main()

# vim: set fileencoding=utf-8
# vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4
